#include <stdio.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <stdlib.h>
#include <csignal>
#include "Global.h"
#include "Device.h"
#include "Device_Parameters.h"
#include "Physics_Parameters.h"

using namespace std;

void KMCLoop(Defect& Def,RateTable& TRT,CarrierH& Carr)
{
	double Ei;
	int i,j=0,Loci,Flag=0,select;	

	// NEED TO KNOWS
	/************************************************************************************************
	- Transitions are only allowed to states which are 'not occupied' by a hole.
	- 0 : Occupied by an electron, 1 : Occupied by a hole.
	- Transitions are only allowed to Def.FlagOccupation[]=0.
	REMEMBER : In the KMCLoop function 'i' is the carrier number but this 'i' has to be translated to
	carrier energy for every other function.
	************************************************************************************************/
	for (i=0;i<CarrierMax;i++) // CarrierMax - lets pretend that there are only 10 carriers
	{		
		Ei=Carr.Energy[i];
		Loci=Ei/EnergyStep;
		PathCount=0;

		//cout<<"Carrier i : "<<i<<"  "<<"Carrier Energy : "<<Ei<<"   "<<"Loci : "<<Loci<<"   "<<"pos : "<<Carr.xpos[i]<<"   "<<"Status : "<<Carr.Status[i]<<'\n';

		cout<<'\n'<<"CARRIER IN TRANSIT : "<<i<<'\n';

		Flag=0;

		while (Flag==0)
		{			
		// The switch statement should run uptil the time the carrier has been collected, i.e. till Carr.Status==2
		switch (Carr.Status[i])
		{
			case 0: // At the barrier
			//cout<<'\n'<<"CARRIER IS AT THE BARRIER : "<<i<<'\n';
			fROC(i,Def,TRT,Carr); // Picking the inital transition for a carrier at the barrier (finalROC - final state after Rate of Capture)
			Flag=1;
			break;

			case 1: // Hopping via Defects
			// Create D2D,PF(can be created before hand),D2E tables and normalize them then pick final state
			//cout<<'\n'<<"CARRIER IS HOPPING VIA DEFECTS : "<<i<<'\n';
			HopTable(i,Def,TRT,Carr);
			select=MechSelect(TRT);
			FinalState(i,select,Def,TRT,Carr);

			switch (select)
			{
				case 0: // PF
				Carr.FinalRate[i]=TRT.TrackRate[select][i];
				Carr.TransType[i]=select;
				break;

				case 1: // D2E
				Carr.FinalRate[i]=TRT.TrackRate[select][i];
				Carr.TransType[i]=select;
				break;
			}
			//Flag=1;
			break;

			case 2: // Collected
			//cout<<"  "<<"Final Carrier Energy : "<<Carr.Energy[i]<<'\n';
			Carr.TotPath[i]=PathCount;
			Flag=1;
			//cout<<"CARRIER HAS BEEN COLLECTED"<<'\n';
			break;
		}
		}
		// 3 - Create D2D[i][j] table (i-is current energy after 1st transition, j is all other defect states), PF[i] can be created statically.
		// D2E[i][j] can be created dynamically (i-is the current energy, j is all final states)
		// 4 - Utilize the TRT.S1Table[0-2][i] table to pick the mechanism, but when we normalize we have to do it only for 1 particular energy aka one transition for each mech.
	}
	//cout<<'\n'<<"Inside KMC Loop"<<'\n';
}
