#include <stdio.h>
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <stdlib.h>
#include <csignal>
#include "Global.h"
#include "Device.h"
#include "Device_Parameters.h"
#include "Physics_Parameters.h"

using namespace std;

double MPROC(int i,int j,Defect& Def,int t) // t = 0 (Electrode to Defect), t = 1 (Defect to Electrode), t=2 (Defect to Defect)
{
	//cout<<'\n'<<"MPROC Function"<<'\n';

	//cout<<'\n'<<"Inelastic Tunneling Test"<<'\n'<<'\n';	

	double R,Ei,Ef,x,Difference,Ep,DefectDepth,EpTemp=0,EvTail,newx; // F = V/m, hw = eV, S = Huang Rhys Factor

	//Ei = Initial Energy, Ef = Final Energy
	//1 - For electrode to defect, Ei is the carrier energy and Ef is the final energy
	//2 - For defect to electrode, Ei is the defect energy and Ef is the final energy

	// DOS, F(E), T(E), C(E)

	int p,PhononMode,Choice; // Integer phonon number	

	switch(t)
	{
		case 0: // Electrode to Defect
		Ei=i*EnergyStep;
		Ef=Def.Epos[j];
		x=Def.xpos[j];
		newx=floor((x/dx)*10)/10;		
		EvTail=VBOffset-(newx*dx*VBOffset/ithickness);		
		DefectDepth=EvTail-Def.Epos[j]; // Defect Depth	
		break;

		case 1: // Defect to Electrode
		Ei=i*EnergyStep; // Energy of Carrier in a defect state
		Ef=j*EnergyStep; // Energy of final state	
		x=ithickness-initialx;		
		newx=floor((initialx/dx)*10)/10;		
		EvTail=VBOffset-(newx*dx*VBOffset/ithickness);		
		DefectDepth=EvTail-Ei; // Defect Depth		
		break;

		case 2: // Defect to Defect
		Ei=i*EnergyStep;
		//Ef=Def.Epos[j];
		Ef=0.11;
		//x=Def.xpos[j];		
		//newx=floor((x/dx)*10)/10;
		newx=floor((finalx/dx)*10)/10;
		EvTail=VBOffset-(newx*dx*VBOffset/ithickness);		
		//DefectDepth=EvTail-Def.Epos[j]; // Defect Depth
		DefectDepth=EvTail-Ef;
		break;
	}	
	if (DefectDepth<0)
	{
		//cout<<'\n'<<"SINGULARITY"<<" i : "<<i<<"  "<<" j : "<<j<<"  "<<"x : "<<x/dx<<'\n';
		//R=0;
		//return R;
		raise(SIGSEGV);
	}	
/**************************************************************************************************
					CALCULATING THE COUPLED STATE USING PHONON MODES
					Choice 0 : Inelastic Transition using phonon mode
					       1 : No Transition available
					       2 : Elastic Transition using phonon mode
**************************************************************************************************/
	//cout<<'\n'<<"Ei : "<<Ei<<"   "<<"Ef : "<<Ef<<'\n';					   
	if (Ef>Ei)
	{
		//cout<<"CONDITION 1"<<'\n';
		//positive phonon mode required, for an INJECTION PROCESS, +p is a EMISSION PROCESS
		for (p=1;p<=5;p++)
		{
			Difference=(Ei+p*homega)-Ef;
			EpTemp=Ei+p*homega;
			//cout<<"p : "<<p<<"   "<<"EMISSION PROCESS"<<"   "<<"Difference : "<<Difference<<"    "<<"Coupled State : "<<Ei+p*homega<<'\n';
			if (Difference==0)
			{
				Ep=Ei+p*homega;
				PhononMode=p;
				Choice=0;
				//cout<<"Coupled State Ep PERFECT MATCH : "<<Ep<<'\n';
				break;
			}
			else if (Difference>=-0.005 && Difference<=0.005 && EpTemp>=0)
			{
				Ep=Ei+p*homega;
				PhononMode=p;
				Choice=0;
				//cout<<"Coupled State Ep BOTTLENECK : "<<Ep<<'\n';
				break;
			}
			else
			{
				Ep=-0.3;
				Choice=1;
			}
		}
	}
	else if (Ef<Ei)
	{
		//cout<<"CONDITION 2"<<'\n';
		//negative phonon mode required, for an INJECTION PROCESS, -p is an ABSORPTION PROCESS
		for (p=-5;p<=-1;p++)
		{
			Difference=(Ei+p*homega)-Ef;
			EpTemp=Ei+p*homega;
			//cout<<"p : "<<p<<"   "<<"ABSORPTION PROCESS"<<"    "<<"Difference : "<<Difference<<"    "<<"Coupled State : "<<Ei+p*homega<<'\n';
			if (Difference==0)
			{
				Ep=Ei+p*homega;
				PhononMode=p;
				Choice=0;
				//cout<<"Coupled State Ep PERFECT MATCH : "<<Ep<<'\n';
				break;
			}
			else if (Difference>=-0.005 && Difference<=0.005 && EpTemp>=0)
			{
				Ep=Ei+p*homega;
				PhononMode=p;
				Choice=0;
				//cout<<"Coupled State Ep BOTTLENECK : "<<Ep<<'\n';
				break;
			}
			else
			{
				Ep=-0.3;
				Choice=1;
			}
		}
	}
	else if (Ei==Ef)
	{
		//cout<<"CONDITION 3"<<'\n';
		Choice=2;		
	}
	
/**************************************************************************************************
					CALCULATING THE COUPLED STATE USING PHONON MODES
**************************************************************************************************/
//cout<<"TT Ei : "<<Ei<<"   "<<"TT Ef : "<<Ef<<"   "<<"Ep : "<<Ep<<"    "<<"PhononMode : "<<PhononMode<<'\n';

if (t==0 || t==1)
{
	switch (Choice)
	{
		case 0: // Inelastic Transition R=N(E)f(E)T(E)c(E,x)dE

		if (Ep<0)
		{
			cout<<'\n'<<"COUPLED STATE IS < 0"<<'\n';
			raise(SIGSEGV);
		}
		else
		{
			R=InelasticTransition(Ep,DefectDepth,x,PhononMode,t); // Ep = Energy of coupled state, Defect Depth, x = tunneling depth, phonon mode, t = 0 : E->D , 1 : D->E			
		}
		break;

		case 1: // No Transition Available R=0
		R=0;
		break;

		case 2: // Elastic Transition R=C(E)f(E)T(E)
		R=ElasticTransition(Ei,DefectDepth,x,t);				
		break;
	}
}
else if (t==2) // Defect to Defect Transitions
{
	switch (Choice)
	{
		case 0:
		R=PhD2D(i,j,PhononMode,Ep,Def);
		break;

		case 1:
		R=0;
		break;

		case 2:		
		R=ElasticTransition(Ei,DefectDepth,x,t);
		//R=PhD2D(i,j,PhononMode,Ep,Def);
		break;
	}	
}
	return R;
}

void NormalizeRCTable(RateTable& TRT)
{
	int i,j,dim;
	double temp,*max;

	dim=VBOffset/EnergyStep;
	max=new double[dim];

	for (i=0;i<=VBOffset/EnergyStep;i++)
	{
		for (j=1;j<nDefect;j++)
		{
			TRT.RCTable[i][j]=TRT.RCTable[i][j-1]+TRT.RCTable[i][j];
			temp=TRT.RCTable[i][j];
		}
		max[i]=temp;
		TRT.GammaRC[i]=temp;
		temp=0;
	}

	for (i=0;i<=VBOffset/EnergyStep;i++)
	{
		for (j=0;j<nDefect;j++)
		{
			TRT.NRCTable[i][j]=TRT.RCTable[i][j]/max[i];
			//cout<<"j " <<j<<"   "<<"TABLE : "<<TRT.RCTable[i][j]<<"    "<<"NORMTABLE : "<<TRT.RCTable[i][j]/max[i]<<'\n';
		}
	}

	/*ofstream myfile;

	myfile.open("NormTableRC350.txt");	
	for (j=0;j<nDefect;j++)
	{
		myfile<<TRT.NRCTable[350][j]<<'\n';
	}
	myfile.close();*/
	
	delete [] max;
}

double EfSum(Defect& Def,RateTable& TRT,int k)
{
	double sum=0,temp=0;	
	int j=0,count=0,max;

	switch (k)
	{
		case 1: // Defect to Defect
		max=(VBOffset/EnergyStep)+1;		
		break;

		case 2: // Defect to Electrode
		max=nDefect;		
		break;
	}

/**************************************************************************
Efsum calculated the sum of the array which is the 'Gamma Max' of the given
mechanism
**************************************************************************/	

	for (j=0;j<=max-1;j++)
	{
		if (k==1)
			temp=TRT.D2E[j];
		else if (k==2)
			temp=TRT.D2D[j];

		sum=sum+temp;
	}
	return sum;
}

void NormalizeS1Table(RateTable& TRT)
{
	int i;
	double tau=0;

	// Summation of array
	for (i=1;i<=2;i++)
	{
		TRT.S1Table[i]=TRT.S1Table[i-1]+TRT.S1Table[i];
	}

	// Calculating the max	
	tau=TRT.S1Table[2];
	GammaMax=tau;

	// Normalizing the table
	TRT.S1Table[0]=TRT.S1Table[0]/tau;
	TRT.S1Table[1]=TRT.S1Table[1]/tau;
	TRT.S1Table[2]=TRT.S1Table[2]/tau;

	cout<<"Norm S1 Table 0 : "<<TRT.S1Table[0]<<"   "<<"1 : "<<TRT.S1Table[1]<<"   "<<"2 : "<<TRT.S1Table[2]<<"   "<<"GammaMax : "<<tau<<'\n';
}

void NormalizeS2Table(RateTable& TRT,int k)
{
	int j,dim;
	double max=0;

	dim=VBOffset/EnergyStep;

	switch (k)
	{
		case 1: //Defect to Electrode Emission
		//Summation
		for (j=1;j<=VBOffset/EnergyStep;j++)
		{
			TRT.D2E[j]=TRT.D2E[j-1]+TRT.D2E[j];
		}
		max=TRT.D2E[dim];

		//Normalization
		for (j=0;j<=VBOffset/EnergyStep;j++)
			TRT.D2E[j]=TRT.D2E[j]/max;	

		break;

		case 2: //Defect to Defect Emission
		//Summation
		for (j=1;j<nDefect;j++)
		{
			TRT.D2D[j]=TRT.D2D[j-1]+TRT.D2D[j];
		}
		max=TRT.D2D[nDefect-1];

		//Normalization
		for (j=1;j<nDefect;j++)
			TRT.D2D[j]=TRT.D2D[j]/max;

		break;
	}
}

int ValidateFinalState(double Ein,double Ef)
{
	int Flag,p;
	double Difference;

	if (Ein>Ef)
	{
		for (p=-5;p<=1;p++)
		{
			Difference=(Ein-p*homega)-Ef;
			if (abs(Difference)<=0.005)
				Flag=1;
			else
				Flag=0;
		}
	}
	else if (Ein<Ef)
	{
		for (p=1;p<=5;p++)
		{
			Difference=(Ein+p*homega)-Ef;
			if (abs(Difference)<=0.005)
				Flag=1;
			else
				Flag=0;
		}
	}
	else if (Ein==Ef)
	{
		Flag=1;
	}

	return Flag;
}

int BinarySearch(RateTable& TRT,int loci,double r,int s)
{
	int state,flag=0,first,last,middle,t,count=0;

	
	if (s==0 || s==2)
	{
		first=0;
		last=nDefect;
		middle=(first+last)/2;
	}
	else if (s==1)
	{
		first=0;
		last=VBOffset/EnergyStep;
		middle=(first+last)/2;
	}	

	/**************************************
	0 - Initial ROC
	1 - Defect to Electrode Emission
	2 - Defect to Defect Emission
	**************************************/

	while (flag==0)
	{
		count++;
		switch (s)
		{
			case 0: // Initial ROC, max - nDefect

			if (r>TRT.NRCTable[loci][middle])
				first=middle;
			else if (r<=TRT.NRCTable[loci][middle])
				last=middle;

			t=last-first;

			break;

			case 1: // Defect to Electrode Emission, max - VBOffset

			if (r>TRT.D2E[middle])
				first=middle;
			else if (r<=TRT.D2E[middle])
				last=middle;

			t=last-first;			

			break;

			case 2: //  Defect to Defect Emission, max - nDefect

			if (r>TRT.D2D[middle])
				first=middle;
			else if (r<=TRT.D2D[middle])
				last=middle;

			t=last-first;				
			break;
		}		

		if (t==1)
			flag=1;

		middle=(first+last)/2;
	}
	state=last;
	return state;
}
